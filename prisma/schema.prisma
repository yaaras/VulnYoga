// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  passwordHash String
  name        String
  address     String?
  phone       String?
  role        String   @default("CUSTOMER") // Using String instead of enum for SQLite compatibility
  resetToken  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       Item[]
  orders      Order[]
  apiKeys     ApiKey[]

  @@map("users")
}

model Item {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  price         Float
  costPrice     Float    // Internal cost - should be protected
  supplierEmail String   // Should be protected
  stock         Int      @default(0)
  imageUrl      String?
  isFeatured    Boolean  @default(false)
  createdByUserId Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  createdByUser User @relation(fields: [createdByUserId], references: [id])

  @@map("items")
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  status          String   @default("CART") // Using String instead of enum for SQLite compatibility
  items           String   // JSON array: [{itemId: number, qty: number}]
  total           Float
  discountCode    String?
  paid            Boolean  @default(false)
  shippingAddress String
  createdAt       DateTime @default(now())

  // Relations
  user            User     @relation(fields: [userId], references: [id])

  @@map("orders")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  key       String   @unique
  label     String
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("api_keys")
}
